#define F_CPU 16000000UL  // Frecuencia del microcontrolador a 16 MHz
#define BAUD 9600  // Velocidad de comunicación serial a 9600 baudios
#define MYUBRR ((F_CPU / (16UL * BAUD)) - 1)  // Cálculo del valor del registro UBRR para UART
#define STEP_DELAY 100  // Retardo entre pasos del motor
#define CM_TO_DELAY_RATIO 10  // Factor de conversión de cm a tiempo de retardo

#define z_down 2  // Definir pin para movimiento Z hacia abajo
#define z_up 3  // Definir pin para movimiento Z hacia arriba
#define y_down 4  // Definir pin para movimiento Y hacia abajo
#define y_up 5  // Definir pin para movimiento Y hacia arriba
#define x_left 6  // Definir pin para movimiento X hacia la izquierda
#define x_right 7  // Definir pin para movimiento X hacia la derecha

#include <stdlib.h>
#include <avr/io.h>
#include <util/delay.h>

unsigned char opcion;

void digitalWrite(int pin, int state) {
	if (state == 1) {
		PORTD |= (1 << pin);  // Establecer el pin en alto
		} else {
		PORTD &= ~(1 << pin);  // Establecer el pin en bajo
	}
}

void tx(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Esperar hasta que el buffer esté libre
	UDR0 = data;  // Enviar dato por UART
}

unsigned char rx(void) {
	while (!(UCSR0A & (1 << RXC0)));  // Esperar a recibir datos
	return UDR0;  // Devolver el dato recibido
}

void print(const char* str) {
	while (*str) {
		tx(*str++);  // Enviar cada carácter de la cadena
	}
}

void setUART(void) {
	UBRR0H = (unsigned char)(MYUBRR >> 8);  // Configurar el registro UBRR para la comunicación UART
	UBRR0L = (unsigned char)MYUBRR;
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);  // Habilitar transmisión y recepción
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  // Configurar tamaño de datos a 8 bits
}

void menu(void){
		print("\n");
		print("a: Dibujar triangulo");
		print("\n");
		print("b: Dibujar cruz");
		print("\n");
		print("c: Dibujar circulo");
		print("\n");
		print("d: Dibujar oso");
		print("\n");
		print("e: Dibujar manzana");
		opcion = rx();  // Esperar la selección de opción
		print("\n");
		print("Opcion seleccionada: ");
		tx(opcion);  // Mostrar opción seleccionada
		print("\n");
}

void moveTo(float x0, float y0, float x1, float y1) {
	
	int stepsX = abs((int)((x1 - x0) * CM_TO_DELAY_RATIO));  // Calcular pasos para X
	int stepsY = abs((int)((y1 - y0) * CM_TO_DELAY_RATIO));  // Calcular pasos para Y

	int directionX = (x0 < x1) ? 1 : -1;  // Determinar dirección de X
	int directionY = (y0 < y1) ? 1 : -1;  // Determinar dirección de Y

	int deltaX = stepsX;
	int deltaY = stepsY;

	int err = deltaX - deltaY;
	int e2;

	while (stepsX > 0 || stepsY > 0) {
		e2 = 2 * err;

		if (e2 > -deltaY && stepsX > 0) {
			err -= deltaY;
			x0 += directionX * 0.1;
			stepsX--;
			digitalWrite((directionX > 0) ? x_right : x_left, 1);  // Mover en X
			_delay_ms(STEP_DELAY);
			digitalWrite((directionX > 0) ? x_right : x_left, 0);
		}

		if (e2 < deltaX && stepsY > 0) {
			err += deltaX;
			y0 += directionY * 0.1;
			stepsY--;
			digitalWrite((directionY > 0) ? y_up : y_down, 1);  // Mover en Y
			_delay_ms(STEP_DELAY);
			digitalWrite((directionY > 0) ? y_up : y_down, 0);
		}
	}
}

void clear_buffer(void) {
	while (UCSR0A & (1 << RXC0)) (void) UDR0;  // Limpiar buffer de UART
}

void set00(void) {
	// Restablecer posición inicial (-8 en X, -6 en Y)
	digitalWrite(x_left, 1);
	_delay_ms(8000);
	digitalWrite(x_left, 0);
	digitalWrite(y_down, 1);
	_delay_ms(6000);
	digitalWrite(y_down, 0);
}

void cruz(void) {
	// Iniciar dibujado bajando la piston (Z_down = 1, Z_up = 0)
	digitalWrite(z_down, 1);  
	digitalWrite(z_up, 0);
	_delay_ms(1000);

	moveTo(0, 0, 1, 0);  // Dibujar línea horizontal
	moveTo(1, 0, -1, 0);

	digitalWrite(z_down, 0);  // Levantar piston
	digitalWrite(z_up, 1);
	_delay_ms(1000);
	
	moveTo(-1, 0, 0, 0);
	moveTo(0, 0, 0, 1);

	digitalWrite(z_down, 1);  // Bajar piston nuevamente
	digitalWrite(z_up, 0);
	_delay_ms(1000);

	moveTo(0, 1, 0, -1);

	digitalWrite(z_down, 0);  // Levantar piston
	digitalWrite(z_up, 1);
	_delay_ms(1000);

	moveTo(0, -1, 0, 0);
}

void triangulo(void) {
	moveTo(0, 0, 0, 1);  // Mover al vértice inicial del triángulo
	
	digitalWrite(z_down, 1);  // Bajar piston
	digitalWrite(z_up, 0);
	_delay_ms(1000);

	moveTo(0, 1, -1, -1);  // Dibujar triángulo
	moveTo(-1, -1, 1, -1);
	moveTo(1, -1, 0, 1);

	digitalWrite(z_down, 0);  // Levantar piston
	digitalWrite(z_up, 1);
	_delay_ms(1000);

	moveTo(0, 1, 0, 0);  // Regresar al origen
}

void circulo(void) {
	moveTo(0, 0, 0, 1);

	digitalWrite(z_down, 1);  // Bajar piston
	digitalWrite(z_up, 0);
	_delay_ms(1000);

	// Dibujar un círculo con múltiples segmentos
	moveTo(0, 1, -0.5, 1);
	moveTo(-0.5, 1, -1, 0.5);
	moveTo(-1, 0.5, -1, -0.5);
	moveTo(-1, -0.5, -0.5, -1);
	moveTo(-0.5, -1, 0.5, -1);
	moveTo(0.5, -1, 1, -0.5);
	moveTo(1, -0.5, 1, 0.5);
	moveTo(1, 0.5, 0.5, 1);
	moveTo(0.5, 1, 0, 1);

	digitalWrite(z_down, 0);  // Levantar piston
	digitalWrite(z_up, 1);
	_delay_ms(1000);
	
	moveTo(0, 1, 0, 0);  // Regresar al origen
}

void manzana(void) {
    moveTo(0, 0, 0, 1);  // Mover al punto de inicio
    
    digitalWrite(z_down, 1);  // Bajar piston
    digitalWrite(z_up, 0);
    _delay_ms(1000);

    // Dibujar la figura de una manzana usando múltiples segmentos
    moveTo(0, 1, -0.5, 1);
    moveTo(-0.5, 1, -1, 0.5);
    moveTo(-1, 0.5, -1, -0.5);
    moveTo(-1, -0.5, -0.5, -1);
    moveTo(-0.5, -1, 0.5, -1);
    moveTo(0.5, -1, 1, -0.5);
    moveTo(1, -0.5, 1, 0.5);
    moveTo(1, 0.5, 0.5, 1);
    moveTo(0.5, 1, 0, 1);  // Cerrar la figura
    
    digitalWrite(z_down, 0);  // Levantar piston
    digitalWrite(z_up, 1);
    _delay_ms(1000);

    moveTo(0, 1, 0, 0);  // Regresar al piston
}

void oso(void) {
    moveTo(0, 0, 0, 1);  // Mover al punto de inicio
    
    digitalWrite(z_down, 1);  // Bajar piston
    digitalWrite(z_up, 0);
    _delay_ms(1000);

    // Dibujar un círculo para la cabeza del oso
    moveTo(0, 1, -0.5, 1);
    moveTo(-0.5, 1, -1, 0.5);
    moveTo(-1, 0.5, -1, -0.5);
    moveTo(-1, -0.5, -0.5, -1);
    moveTo(-0.5, -1, 0.5, -1);
    moveTo(0.5, -1, 1, -0.5);
    moveTo(1, -0.5, 1, 0.5);
    moveTo(1, 0.5, 0.5, 1);
    moveTo(0.5, 1, 0, 1);  // Cerrar el círculo
    
    digitalWrite(z_down, 0);  // Levantar piston
    digitalWrite(z_up, 1);
    _delay_ms(1000);
    
    // Dibujar las orejas del oso
    moveTo(0.5, 1, 1, 1.5);
    digitalWrite(z_down, 1);  // Bajar piston
    digitalWrite(z_up, 0);
    _delay_ms(1000);

    moveTo(1, 1.5, 0.5, 1);  // Primera oreja
    digitalWrite(z_down, 0);  // Levantar piston
    digitalWrite(z_up, 1);
    _delay_ms(1000);

    moveTo(-0.5, 1, -1, 1.5);
    digitalWrite(z_down, 1);  // Bajar piston
    digitalWrite(z_up, 0);
    _delay_ms(1000);

    moveTo(-1, 1.5, -0.5, 1);  // Segunda oreja
    digitalWrite(z_down, 0);  // Levantar piston
    digitalWrite(z_up, 1);
    _delay_ms(1000);
    
    moveTo(0, 1, 0, 0);  // Regresar al origen
}

int main(void){
	setUART();
	DDRD |= 0XFF;
	set00();
    while(1){
		clear_buffer();
		menu();
		switch (opcion) {
			case 'a':
			print("\n");
			print("Dibujando triangulo");
			print("\n");
			triangulo();
			break;
			case 'b':
			print("\n");
			print("Dibujando cruz");
			print("\n");
			cruz();
			break;
			case 'c':
			print("\n");
			print("Dibujando circulo");
			print("\n");
			circulo();
			break;
			case 'd':
			print("\n");
			print("Dibujando oso");
			print("\n");
			oso();
			break;
			case 'e':
			print("\n");
			print("Dibujando manzana");
			print("\n");
			manzana();
			break;
			default:
			print("\n");
			print("Letra fuera de las opciones");
			print("\n");
			break;
		}
    }
}